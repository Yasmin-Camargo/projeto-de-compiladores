/* Generated By:JavaCC: Do not edit this line. Karloff.java */
import java.io.*;
public class Karloff implements KarloffConstants {

  public static void main(String args[]) throws ParseException,IOException {
    Karloff analisador = new Karloff(new FileInputStream(args[0]));
    analisador.Karloff();
  }

  static final public void Karloff2() throws ParseException {
 Token t;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MAIN:
      case VOID:
      case ACHAVES:
      case FCHAVES:
      case APARENTESES:
      case FPARENTESES:
      case NOVAVARIAVEL:
      case PONTOEVIRGULA:
      case TIPOFLOAT:
      case TIPOBOOLEAN:
      case ATRIBUICAO:
      case PRINT:
      case IF:
      case THEN:
      case WHILE:
      case RETURN:
      case TRUE:
      case FALSE:
      case SOMA:
      case SUBTRACAO:
      case MULTIPLICACAO:
      case DIVISAO:
      case ELOGICO:
      case OULOGICO:
      case MAIOR:
      case MENOR:
      case IGUAL:
      case VIRGULA:
      case FUN:
      case READINPUT:
      case NUM:
      case ID:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MAIN:
        jj_consume_token(MAIN);
           System.out.println("Palavra reservada: main");
        break;
      case VOID:
        jj_consume_token(VOID);
           System.out.println("Palavra reservada: void");
        break;
      case ACHAVES:
        jj_consume_token(ACHAVES);
              System.out.println("Abre chaves: {");
        break;
      case FCHAVES:
        jj_consume_token(FCHAVES);
              System.out.println("Fecha chaves: }");
        break;
      case APARENTESES:
        jj_consume_token(APARENTESES);
                  System.out.println("Abre parenteses: (");
        break;
      case FPARENTESES:
        jj_consume_token(FPARENTESES);
                  System.out.println("Fecha parenteses: )");
        break;
      case NOVAVARIAVEL:
        jj_consume_token(NOVAVARIAVEL);
                   System.out.println("Palavra reservada: newVar");
        break;
      case TIPOFLOAT:
        jj_consume_token(TIPOFLOAT);
                System.out.println("Palavra reservada: float");
        break;
      case TIPOBOOLEAN:
        jj_consume_token(TIPOBOOLEAN);
                  System.out.println("Palavra reservada: boolean");
        break;
      case PONTOEVIRGULA:
        jj_consume_token(PONTOEVIRGULA);
                    System.out.println("Ponto e virgula: ;");
        break;
      case ATRIBUICAO:
        jj_consume_token(ATRIBUICAO);
                 System.out.println("Atribui\u00e7ao: =");
        break;
      case PRINT:
        jj_consume_token(PRINT);
            System.out.println("Palavra reservada: printOut");
        break;
      case IF:
        jj_consume_token(IF);
         System.out.println("Palavra reservada: if");
        break;
      case THEN:
        jj_consume_token(THEN);
           System.out.println("Palavra reservada: then");
        break;
      case WHILE:
        jj_consume_token(WHILE);
            System.out.println("Palavra reservada: while");
        break;
      case RETURN:
        jj_consume_token(RETURN);
             System.out.println("Palavra reservada: return");
        break;
      case FUN:
        jj_consume_token(FUN);
          System.out.println("Palavra reservada: fun");
        break;
      case READINPUT:
        jj_consume_token(READINPUT);
                System.out.println("Palavra reservada: readInput");
        break;
      case TRUE:
        jj_consume_token(TRUE);
           System.out.println("True: true");
        break;
      case FALSE:
        jj_consume_token(FALSE);
            System.out.println("False: false");
        break;
      case SOMA:
        jj_consume_token(SOMA);
           System.out.println("Soma: +");
        break;
      case SUBTRACAO:
        jj_consume_token(SUBTRACAO);
                System.out.println("Subtra\u00e7\u00e3o: -");
        break;
      case MULTIPLICACAO:
        jj_consume_token(MULTIPLICACAO);
                    System.out.println("Multiplica\u00e7\u00e3o: *");
        break;
      case DIVISAO:
        jj_consume_token(DIVISAO);
              System.out.println("Divis\u00e3o: /");
        break;
      case ELOGICO:
        jj_consume_token(ELOGICO);
              System.out.println("E L\u00f3gico: &");
        break;
      case OULOGICO:
        jj_consume_token(OULOGICO);
               System.out.println("OU L\u00f3gico: |");
        break;
      case MAIOR:
        jj_consume_token(MAIOR);
            System.out.println("Maior: >");
        break;
      case MENOR:
        jj_consume_token(MENOR);
            System.out.println("Menor: <");
        break;
      case IGUAL:
        jj_consume_token(IGUAL);
            System.out.println("Igual: ==");
        break;
      case VIRGULA:
        jj_consume_token(VIRGULA);
              System.out.println("Virgula: ,");
        break;
      case NUM:
        t = jj_consume_token(NUM);
            System.out.println("N\u00famero: "+ t.image);
        break;
      case ID:
        t = jj_consume_token(ID);
           System.out.println("Identificador: "+ t.image);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(0);
  }

// KARLOFF -> MAIN FUNC?
  static final public void Karloff() throws ParseException {
    Main();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FUN:
      Func();
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
  }

// MAIN -> "void" "main" "(" ")" "{" VARDECL SEQCOMANDOS "}"
  static final public void Main() throws ParseException {
    jj_consume_token(VOID);
    jj_consume_token(MAIN);
    jj_consume_token(APARENTESES);
    jj_consume_token(FPARENTESES);
    jj_consume_token(ACHAVES);
    Vardecl();
    Seqcomandos();
    jj_consume_token(FCHAVES);
  }

// VARDECL -> "newVar" TIPO TOKEN_id ";" *
  static final public void Vardecl() throws ParseException {
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOVAVARIAVEL:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      jj_consume_token(NOVAVARIAVEL);
      Tipo();
      Tokenid();
      jj_consume_token(PONTOEVIRGULA);
    }
  }

// TIPO -> "float" | "boolean" | "void"
  static final public void Tipo() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TIPOFLOAT:
      jj_consume_token(TIPOFLOAT);
      break;
    case TIPOBOOLEAN:
      jj_consume_token(TIPOBOOLEAN);
      break;
    case VOID:
      jj_consume_token(VOID);
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// SEQCOMANDOS -> COMANDO *
  static final public void Seqcomandos() throws ParseException {
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PRINT:
      case IF:
      case WHILE:
      case RETURN:
      case ID:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_3;
      }
      Comando();
    }
  }

// COMANDO -> TOKEN_id COMANDO’
//  | "if" EXP "then" "{" SEQCOMANDOS "}" ";"
//  | "while" EXP "{" SEQCOMANDOS "}" ";"
//  | "return" EXP ";" 
//  | "printOut" EXP ";"
  static final public void Comando() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      Tokenid();
      ComandoL();
      break;
    case IF:
      jj_consume_token(IF);
      Exp();
      jj_consume_token(THEN);
      jj_consume_token(ACHAVES);
      Seqcomandos();
      jj_consume_token(FCHAVES);
      jj_consume_token(PONTOEVIRGULA);
      break;
    case WHILE:
      jj_consume_token(WHILE);
      Exp();
      jj_consume_token(ACHAVES);
      Seqcomandos();
      jj_consume_token(FCHAVES);
      jj_consume_token(PONTOEVIRGULA);
      break;
    case RETURN:
      jj_consume_token(RETURN);
      Exp();
      jj_consume_token(PONTOEVIRGULA);
      break;
    case PRINT:
      jj_consume_token(PRINT);
      Exp();
      jj_consume_token(PONTOEVIRGULA);
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// COMANDO’ -> "=" COMANDO’’ | "(" LISTAEXP? ")" ";" 
  static final public void ComandoL() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ATRIBUICAO:
      jj_consume_token(ATRIBUICAO);
      ComandoLL();
      break;
    case APARENTESES:
      jj_consume_token(APARENTESES);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case APARENTESES:
      case TRUE:
      case FALSE:
      case NUM:
      case ID:
        Listaexp();
        break;
      default:
        jj_la1[7] = jj_gen;
        ;
      }
      jj_consume_token(FPARENTESES);
      jj_consume_token(PONTOEVIRGULA);
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// COMANDO’’ -> EXP ";" | readInput "(" ")"
  static final public void ComandoLL() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case APARENTESES:
    case TRUE:
    case FALSE:
    case NUM:
    case ID:
      Exp();
      jj_consume_token(PONTOEVIRGULA);
      break;
    case READINPUT:
      jj_consume_token(READINPUT);
      jj_consume_token(APARENTESES);
      jj_consume_token(FPARENTESES);
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// EXP -> "(" EXP OP EXP ")" | FATOR
  static final public void Exp() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case APARENTESES:
      jj_consume_token(APARENTESES);
      Exp();
      Op();
      Exp();
      jj_consume_token(FPARENTESES);
      break;
    case TRUE:
    case FALSE:
    case NUM:
    case ID:
      Fator();
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// FATOR -> TOKEN_id FATOR’ | TOKEN_numliteral | "true" | "false"
  static final public void Fator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      Tokenid();
      FatorL();
      break;
    case NUM:
      Tokennumliteral();
      break;
    case TRUE:
      jj_consume_token(TRUE);
      break;
    case FALSE:
      jj_consume_token(FALSE);
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// FATOR’ -> "(" LISTAEXP? ")" | epsilon
  static final public void FatorL() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case APARENTESES:
      jj_consume_token(APARENTESES);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case APARENTESES:
      case TRUE:
      case FALSE:
      case NUM:
      case ID:
        Listaexp();
        break;
      default:
        jj_la1[12] = jj_gen;
        ;
      }
      jj_consume_token(FPARENTESES);
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
  }

// OP -> "+" | "-" | "*" | "/" | "&" | "|" | "<" | ">" | "=="
  static final public void Op() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SOMA:
      jj_consume_token(SOMA);
      break;
    case SUBTRACAO:
      jj_consume_token(SUBTRACAO);
      break;
    case MULTIPLICACAO:
      jj_consume_token(MULTIPLICACAO);
      break;
    case DIVISAO:
      jj_consume_token(DIVISAO);
      break;
    case ELOGICO:
      jj_consume_token(ELOGICO);
      break;
    case OULOGICO:
      jj_consume_token(OULOGICO);
      break;
    case MAIOR:
      jj_consume_token(MAIOR);
      break;
    case MENOR:
      jj_consume_token(MENOR);
      break;
    case IGUAL:
      jj_consume_token(IGUAL);
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// LISTAEXP -> EXP LISTAEXP’
  static final public void Listaexp() throws ParseException {
    Exp();
    ListaexpL();
  }

//LISTAEXP’ -> "," EXP LISTAEXP’ | epsilon
  static final public void ListaexpL() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VIRGULA:
      jj_consume_token(VIRGULA);
      Exp();
      ListaexpL();
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
  }

// FUNC -> "fun" TIPO TOKEN_id "(" LISTAARG? ")" "{" VARDECL SEQCOMANDOS "}"  FUNC’ 
  static final public void Func() throws ParseException {
    jj_consume_token(FUN);
    Tipo();
    Tokenid();
    jj_consume_token(APARENTESES);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VOID:
    case TIPOFLOAT:
    case TIPOBOOLEAN:
      Listaarg();
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
    jj_consume_token(FPARENTESES);
    jj_consume_token(ACHAVES);
    Vardecl();
    Seqcomandos();
    jj_consume_token(FCHAVES);
    FuncL();
  }

//FUNC’ -> "fun" TIPO TOKEN_id "(" LISTAARG? ")" "{" VARDECL SEQCOMANDOS "}"  FUNC’|  epsilon
  static final public void FuncL() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FUN:
      jj_consume_token(FUN);
      Tipo();
      Tokenid();
      jj_consume_token(APARENTESES);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VOID:
      case TIPOFLOAT:
      case TIPOBOOLEAN:
        Listaarg();
        break;
      default:
        jj_la1[17] = jj_gen;
        ;
      }
      jj_consume_token(FPARENTESES);
      jj_consume_token(ACHAVES);
      Vardecl();
      Seqcomandos();
      jj_consume_token(FCHAVES);
      FuncL();
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
  }

// LISTAARG -> TIPO TOKEN_id LISTAARG’
  static final public void Listaarg() throws ParseException {
    Tipo();
    Tokenid();
    ListaargL();
  }

// LISTAARG’ -> "," TIPO TOKEN_id LISTAARG’ |  epsilon
  static final public void ListaargL() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VIRGULA:
      jj_consume_token(VIRGULA);
      Tipo();
      Tokenid();
      ListaargL();
      break;
    default:
      jj_la1[19] = jj_gen;
      ;
    }
  }

// TOKEN_id -> letra letraoudigito* finalsublinhado*
  static final public void Tokenid() throws ParseException {
    jj_consume_token(ID);
  }

// TOKEN_numliteral -> digitos facao_opcional expoente_opcional
  static final public void Tokennumliteral() throws ParseException {
    jj_consume_token(NUM);
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public KarloffTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[20];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xffffffe0,0xffffffe0,0x0,0x800,0x6040,0x1b0000,0x1b0000,0x600200,0x8200,0x600200,0x600200,0x600000,0x600200,0x200,0xff800000,0x0,0x6040,0x6040,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x1f,0x1f,0x2,0x0,0x0,0x10,0x10,0x18,0x0,0x1c,0x18,0x18,0x18,0x0,0x0,0x1,0x0,0x0,0x2,0x1,};
   }

  /** Constructor with InputStream. */
  public Karloff(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Karloff(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new KarloffTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Karloff(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new KarloffTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Karloff(KarloffTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(KarloffTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List jj_expentries = new java.util.ArrayList();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[37];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 20; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 37; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
